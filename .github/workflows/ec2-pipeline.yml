name: Run EC2 Pipeline and Upload to S3

on:
  push:
    branches:
      - main  # Trigger on push to the main branch

jobs:
  deploy:
    name: Deploy to EC2 and Run Pipeline
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Ensure latest AWS CLI version
      run: |
        # Check if AWS CLI is already installed
        if [ -x "$(command -v aws)" ]; then
          echo "AWS CLI is already installed. Updating..."
        else
          echo "AWS CLI not found. Installing..."
          # Download AWS CLI installer
          curl -L -o awscliv2.zip https://awscli.amazonaws.com/awscliv2/exe/awscliv2.zip
        fi

        # Verify if the zip file was downloaded successfully
        if [ ! -f awscliv2.zip ]; then
          echo "Failed to download AWS CLI installer."
          exit 1
        fi

        # Check if the file is a valid zip file
        if ! unzip -t awscliv2.zip &>/dev/null; then
          echo "The downloaded file is not a valid zip file."
          exit 1
        fi

        # Unzip and install AWS CLI
        echo "Unzipping the AWS CLI installer..."
        unzip -q awscliv2.zip

        # Check if unzip was successful
        if [ $? -eq 0 ]; then
          echo "AWS CLI downloaded and unzipped successfully."
          sudo ./aws/install --update
        else
          echo "Error: Failed to unzip the AWS CLI installer."
          exit 1
        fi

    - name: Create Security Group
      run: |
        SECURITY_GROUP_ID=$(aws ec2 create-security-group \
          --group-name MySecurityGroup \
          --description "Security group for EC2 instance" \
          --query "GroupId" \
          --output text)
        echo "Created security group with ID: $SECURITY_GROUP_ID"
        
        # Allow SSH (port 22) and HTTP (port 80) access
        aws ec2 authorize-security-group-ingress --group-id $SECURITY_GROUP_ID --protocol tcp --port 22 --cidr 0.0.0.0/0
        aws ec2 authorize-security-group-ingress --group-id $SECURITY_GROUP_ID --protocol tcp --port 80 --cidr 0.0.0.0/0

    - name: Create Key Pair
      run: |
        KEY_PAIR_NAME="my-ec2-key-pair"
        aws ec2 create-key-pair \
          --key-name $KEY_PAIR_NAME \
          --query "KeyMaterial" \
          --output text > $KEY_PAIR_NAME.pem
        chmod 400 $KEY_PAIR_NAME.pem
        echo "Created key pair: $KEY_PAIR_NAME"

    - name: Create a Subnet
      run: |
        SUBNET_ID=$(aws ec2 create-subnet \
          --vpc-id $(aws ec2 describe-vpcs --query "Vpcs[0].VpcId" --output text) \
          --cidr-block "10.0.1.0/24" \
          --availability-zone ${{ secrets.AWS_REGION }}a \
          --query "Subnet.SubnetId" \
          --output text)
        echo "Created subnet with ID: $SUBNET_ID"

    - name: Launch EC2 Instance
      run: |
        INSTANCE_ID=$(aws ec2 run-instances \
          --image-id ami-084568db4383264d4 \
          --instance-type t2.micro \
          --iam-instance-profile Name="AmazonEC2RoleforSSM" \
          --key-name my-ec2-key-pair \
          --security-group-ids $SECURITY_GROUP_ID \
          --subnet-id $SUBNET_ID \
          --associate-public-ip-address \
          --query "Instances[0].InstanceId" \
          --output text)
        echo "EC2 Instance launched with ID: $INSTANCE_ID"

    - name: Wait for EC2 instance to be running
      run: |
        echo "Waiting for EC2 instance $INSTANCE_ID to be running..."
        aws ec2 wait instance-running --instance-ids $INSTANCE_ID
        echo "EC2 instance $INSTANCE_ID is now running."

    - name: Check if SSM agent is online
      run: |
        echo "Checking SSM status..."
        STATUS=$(aws ssm describe-instance-information \
          --query "InstanceInformationList[?InstanceId=='$INSTANCE_ID'].PingStatus" \
          --output text)
        if [ "$STATUS" != "Online" ]; then
          echo "SSM agent is not online. Please check the EC2 instance."
          exit 1
        fi
        echo "✅ SSM agent is online on instance $INSTANCE_ID."

    - name: Run pipeline script on EC2 via SSM
      run: |
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids $INSTANCE_ID \
          --document-name "AWS-RunShellScript" \
          --comment "Run pipeline script" \
          --parameters 'commands=["cd /home/ubuntu && curl -O https://raw.githubusercontent.com/conveytopraveenkumar/CICD/main/Pipeline.sh && chmod +x Pipeline.sh && ./Pipeline.sh"]' \
          --query "Command.CommandId" \
          --output text)
        echo "✅ SSM command sent. Command ID: $COMMAND_ID"

    - name: Notify about artifact upload
      run: |
        echo "ℹ️ Artifact upload should be handled inside the Pipeline.sh script on EC2."
        echo "Add this to Pipeline.sh if not already:"
        echo "aws s3 cp /home/ubuntu/output/ s3://${{ secrets.S3_BUCKET_NAME }}/pipeline-artifacts/ --recursive"

    - name: Terminate EC2 instance after execution
      run: |
        aws ec2 terminate-instances --instance-ids $INSTANCE_ID
        echo "☠️ EC2 instance $INSTANCE_ID terminated."

    - name: Delete Key Pair
      run: |
        aws ec2 delete-key-pair --key-name my-ec2-key-pair
        echo "Deleted key pair my-ec2-key-pair."

    - name: Delete Security Group
      run: |
        aws ec2 delete-security-group --group-id $SECURITY_GROUP_ID
        echo "Deleted security group $SECURITY_GROUP_ID."

    - name: Pipeline Complete
      run: echo "✅ Pipeline completed successfully."

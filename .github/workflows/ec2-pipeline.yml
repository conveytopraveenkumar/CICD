name: Build and Upload Artifacts

on:
  push:
    branches:
      - main

jobs:
  build_and_upload:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 3: Launch EC2 Instance with AWS CLI Installation
      - name: Launch EC2 Instance
        run: |
          INSTANCE_ID=$(aws ec2 run-instances --image-id ami-09eb231ad55c3963d \
            --count 1 --instance-type t2.micro \
            --iam-instance-profile Name=EC2SSMInstanceProfile1 \
            --key-name new-key \
            --security-group-ids sg-0226bb335bbecbf05 \
            --subnet-id subnet-089b826030629808d \
            --user-data file://install-aws-cli.sh \
            --query "Instances[0].InstanceId" --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      # Step 4: Wait for EC2 Instance to Start
      - name: Wait for EC2 Instance to Start
        run: aws ec2 wait instance-running --instance-ids $INSTANCE_ID

      # Step 5: Wait for Instance Initialization
      - name: Wait for Instance Initialization
        run: |
          while true; do
            INSTANCE_STATE=$(aws ec2 describe-instance-status --instance-ids $INSTANCE_ID --query "InstanceStatuses[0].InstanceState.Name" --output text)
            SYSTEM_STATUS=$(aws ec2 describe-instance-status --instance-ids $INSTANCE_ID --query "InstanceStatuses[0].SystemStatus.Status" --output text)
            INSTANCE_STATUS=$(aws ec2 describe-instance-status --instance-ids $INSTANCE_ID --query "InstanceStatuses[0].InstanceStatus.Status" --output text)

            echo "Current State: $INSTANCE_STATE | System Status: $SYSTEM_STATUS | Instance Status: $INSTANCE_STATUS"

            if [[ "$INSTANCE_STATE" == "running" && "$SYSTEM_STATUS" == "ok" && "$INSTANCE_STATUS" == "ok" ]]; then
              echo "Instance is fully initialized!"
              break
            fi
            sleep 10
          done

      # Step 6: Clone GitHub Repository on EC2
      - name: Clone Repository on EC2
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "[{\"Key\":\"InstanceIds\",\"Values\":[\"$INSTANCE_ID\"]}]" \
            --parameters '{"commands":["cd /home/ubuntu && git clone https://github.com/conveytopraveenkumar/CICD.git || (cd CICD && git pull origin main)"]}' \
            --region us-east-1 \
            --query "Command.CommandId" --output text

      # Step 7: Run Pipeline Script on EC2 using SSM
      - name: Execute Pipeline Script via SSM
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "[{\"Key\":\"InstanceIds\",\"Values\":[\"$INSTANCE_ID\"]}]" \
            --parameters '{"commands":["bash /home/ubuntu/CICD/pipeline.sh"]}' \
            --region us-east-1 \
            --query "Command.CommandId" --output text

      # Step 8: Upload Output File to S3
      - name: Upload Output to S3
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "[{\"Key\":\"InstanceIds\",\"Values\":[\"$INSTANCE_ID\"]}]" \
            --parameters '{"commands":["aws s3 cp /home/ubuntu/output/result.txt s3://cicd-github-artifacts-bucket/result-$(date +%s).txt"]}' \
            --region us-east-1

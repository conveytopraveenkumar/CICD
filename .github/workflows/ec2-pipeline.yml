name: Run EC2 Pipeline and Upload to S3

on:
  push:
    branches:
      - main  # Trigger the pipeline when pushing to the `main` branch

jobs:
  deploy:
    name: Deploy to EC2 and Run Pipeline
    runs-on: ubuntu-latest

    steps:
    # Checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up AWS credentials using GitHub secrets
    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Install AWS CLI
    - name: Install AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install

    # Launch an EC2 instance dynamically (or use an existing instance ID)
    - name: Launch EC2 instance
      id: launch_ec2
      run: |
        INSTANCE_ID=$(aws ec2 run-instances \
          --image-id ami-084568db4383264d4 \  # Amazon Linux 2 AMI in us-east-1, update if needed
          --count 1 \
          --instance-type t2.micro \
          --key-name key-01d3ba78ff072d2b2 \
          --security-group-ids sg-0226bb335bbecbf05 \  # Ensure the security group allows outbound traffic
          --subnet-id subnet-0efc1a680f00257a5 \  # Use a subnet with public IP assignment
          --associate-public-ip-address \   # Ensure public IP
          --query 'Instances[0].InstanceId' \
          --output text)
        
        echo "Launched EC2 instance with ID: $INSTANCE_ID"
        echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT  # Set output for subsequent steps

    # Wait for the EC2 instance to be ready
    - name: Wait for EC2 instance to be ready
      run: |
        aws ec2 wait instance-running --instance-ids ${{ steps.launch_ec2.outputs.instance_id }}

    # Send the pipeline script to EC2 and execute it
    - name: Run pipeline script on EC2
      run: |
        aws ssm send-command \
          --instance-ids ${{ steps.launch_ec2.outputs.instance_id }} \
          --document-name "AWS-RunShellScript" \
          --comment "Running pipeline script" \
          --parameters 'commands=["cd /home/ec2-user && curl -O https://raw.githubusercontent.com/conveytopraveenkumar/CICD/main/Pipeline.sh && chmod +x Pipeline.sh && ./Pipeline.sh"]' \
          --output text \
          --query "Command.CommandId"

    # Clean up (Stop EC2 instance after pipeline execution)
    - name: Stop EC2 instance after pipeline execution
      run: |
        aws ec2 terminate-instances --instance-ids ${{ steps.launch_ec2.outputs.instance_id }}
        echo "Terminated EC2 instance."

    # Done
    - name: Pipeline Complete
      run: echo "Pipeline execution completed and artifacts uploaded to S3."
